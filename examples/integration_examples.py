#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\n🔗 Danbooru BGE-M3 RAG Server - 集成示例\n=========================================\n\n本文件展示如何将Danbooru BGE-M3 RAG服务器集成到各种应用中：\n- Stable Diffusion WebUI\n- ComfyUI\n- Discord Bot\n- Web应用\n- API集成\n\"\"\"\n\nimport asyncio\nimport json\nimport requests\nfrom typing import Dict, List, Any\nimport websockets\nimport discord\nfrom discord.ext import commands\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nimport gradio as gr\n\nclass DanbooruRAGIntegration:\n    \"\"\"Danbooru RAG集成基础类\"\"\"\n    \n    def __init__(self, server_url: str = \"http://localhost:8000\"):\n        self.server_url = server_url\n        self.session = requests.Session()\n    \n    def search_tags(self, query: str, limit: int = 20) -> Dict[str, Any]:\n        \"\"\"搜索标签\"\"\"\n        try:\n            response = self.session.post(\n                f\"{self.server_url}/search\",\n                json={\"query\": query, \"limit\": limit}\n            )\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e), \"results\": []}\n    \n    def analyze_prompts(self, prompts: List[str]) -> Dict[str, Any]:\n        \"\"\"分析提示词\"\"\"\n        try:\n            response = self.session.post(\n                f\"{self.server_url}/analyze_prompts\",\n                json={\"prompts\": prompts}\n            )\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e), \"analysis\": {}}\n    \n    def create_scene_prompt(self, description: str, nsfw_level: str = \"none\") -> Dict[str, Any]:\n        \"\"\"从场景描述创建提示词\"\"\"\n        try:\n            response = self.session.post(\n                f\"{self.server_url}/create_prompt_from_scene\",\n                json={\"scene_description\": description, \"nsfw_level\": nsfw_level}\n            )\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e), \"positive_prompt\": \"\", \"negative_prompt\": \"\"}\n\n# ==============================================================================\n# 🎨 Stable Diffusion WebUI 集成\n# ==============================================================================\n\nclass StableDiffusionWebUIPlugin:\n    \"\"\"Stable Diffusion WebUI插件\"\"\"\n    \n    def __init__(self, rag_client: DanbooruRAGIntegration):\n        self.rag = rag_client\n        self.webui_api_url = \"http://127.0.0.1:7860\"\n    \n    def enhance_prompt(self, user_prompt: str) -> Dict[str, str]:\n        \"\"\"增强用户提示词\"\"\"\n        print(f\"🔍 分析用户提示词: '{user_prompt}'\")\n        \n        # 使用RAG系统分析和增强提示词\n        result = self.rag.search_tags(user_prompt, limit=10)\n        \n        if \"error\" not in result:\n            # 提取推荐标签\n            enhanced_tags = []\n            for item in result.get(\"results\", [])[:5]:\n                if \"tag\" in item:\n                    enhanced_tags.append(item[\"tag\"])\n            \n            # 构建增强提示词\n            enhanced_prompt = user_prompt\n            if enhanced_tags:\n                enhanced_prompt += \", \" + \", \".join(enhanced_tags)\n            \n            # 添加质量标签\n            quality_tags = \"masterpiece, best quality, ultra detailed\"\n            enhanced_prompt = quality_tags + \", \" + enhanced_prompt\n            \n            # 负面提示词\n            negative_prompt = \"worst quality, low quality, normal quality, lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, jpeg artifacts, signature, watermark, username, blurry\"\n            \n            return {\n                \"positive\": enhanced_prompt,\n                \"negative\": negative_prompt,\n                \"original\": user_prompt,\n                \"added_tags\": enhanced_tags\n            }\n        \n        return {\n            \"positive\": user_prompt,\n            \"negative\": \"\",\n            \"original\": user_prompt,\n            \"added_tags\": [],\n            \"error\": result.get(\"error\", \"Unknown error\")\n        }\n    \n    def generate_image_with_rag(self, scene_description: str, width: int = 512, height: int = 512) -> Dict[str, Any]:\n        \"\"\"使用RAG系统生成图像\"\"\"\n        print(f\"🎨 基于场景描述生成图像: '{scene_description}'\")\n        \n        # 使用RAG系统创建提示词\n        prompt_result = self.rag.create_scene_prompt(scene_description)\n        \n        if \"error\" not in prompt_result:\n            # 调用Stable Diffusion WebUI API\n            webui_payload = {\n                \"prompt\": prompt_result.get(\"positive_prompt\", scene_description),\n                \"negative_prompt\": prompt_result.get(\"negative_prompt\", \"\"),\n                \"width\": width,\n                \"height\": height,\n                \"steps\": 20,\n                \"cfg_scale\": 7,\n                \"sampler_index\": \"DPM++ 2M Karras\"\n            }\n            \n            try:\n                response = requests.post(\n                    f\"{self.webui_api_url}/sdapi/v1/txt2img\",\n                    json=webui_payload\n                )\n                \n                if response.status_code == 200:\n                    result = response.json()\n                    return {\n                        \"success\": True,\n                        \"images\": result.get(\"images\", []),\n                        \"used_prompt\": prompt_result.get(\"positive_prompt\"),\n                        \"used_negative\": prompt_result.get(\"negative_prompt\"),\n                        \"scene_analysis\": prompt_result.get(\"scene_analysis\", {})\n                    }\n                else:\n                    return {\"success\": False, \"error\": f\"WebUI API error: {response.status_code}\"}\n            \n            except Exception as e:\n                return {\"success\": False, \"error\": f\"Connection error: {str(e)}\"}\n        \n        return {\"success\": False, \"error\": prompt_result.get(\"error\", \"Unknown error\")}\n\n# ==============================================================================\n# 🖼️ ComfyUI 集成\n# ==============================================================================\n\nclass ComfyUIIntegration:\n    \"\"\"ComfyUI集成\"\"\"\n    \n    def __init__(self, rag_client: DanbooruRAGIntegration):\n        self.rag = rag_client\n        self.comfy_url = \"http://127.0.0.1:8188\"\n    \n    def create_workflow_with_rag(self, user_input: str) -> Dict[str, Any]:\n        \"\"\"创建带RAG增强的ComfyUI工作流\"\"\"\n        print(f\"🔧 为ComfyUI创建增强工作流: '{user_input}'\")\n        \n        # 使用RAG分析输入\n        rag_result = self.rag.create_scene_prompt(user_input)\n        \n        if \"error\" not in rag_result:\n            # 创建ComfyUI工作流JSON\n            workflow = {\n                \"1\": {\n                    \"class_type\": \"CheckpointLoaderSimple\",\n                    \"inputs\": {\"ckpt_name\": \"model.safetensors\"}\n                },\n                \"2\": {\n                    \"class_type\": \"CLIPTextEncode\",\n                    \"inputs\": {\n                        \"text\": rag_result.get(\"positive_prompt\", user_input),\n                        \"clip\": [\"1\", 1]\n                    }\n                },\n                \"3\": {\n                    \"class_type\": \"CLIPTextEncode\",\n                    \"inputs\": {\n                        \"text\": rag_result.get(\"negative_prompt\", \"\"),\n                        \"clip\": [\"1\", 1]\n                    }\n                },\n                \"4\": {\n                    \"class_type\": \"EmptyLatentImage\",\n                    \"inputs\": {\"width\": 512, \"height\": 512, \"batch_size\": 1}\n                },\n                \"5\": {\n                    \"class_type\": \"KSampler\",\n                    \"inputs\": {\n                        \"seed\": 42,\n                        \"steps\": 20,\n                        \"cfg\": 7.0,\n                        \"sampler_name\": \"euler\",\n                        \"scheduler\": \"normal\",\n                        \"denoise\": 1.0,\n                        \"model\": [\"1\", 0],\n                        \"positive\": [\"2\", 0],\n                        \"negative\": [\"3\", 0],\n                        \"latent_image\": [\"4\", 0]\n                    }\n                },\n                \"6\": {\n                    \"class_type\": \"VAEDecode\",\n                    \"inputs\": {\n                        \"samples\": [\"5\", 0],\n                        \"vae\": [\"1\", 2]\n                    }\n                },\n                \"7\": {\n                    \"class_type\": \"SaveImage\",\n                    \"inputs\": {\n                        \"filename_prefix\": \"RAG_Generated\",\n                        \"images\": [\"6\", 0]\n                    }\n                }\n            }\n            \n            return {\n                \"success\": True,\n                \"workflow\": workflow,\n                \"rag_analysis\": rag_result,\n                \"enhanced_prompt\": rag_result.get(\"positive_prompt\")\n            }\n        \n        return {\"success\": False, \"error\": rag_result.get(\"error\")}\n\n# ==============================================================================\n# 🤖 Discord Bot 集成\n# ==============================================================================\n\nclass DanbooruDiscordBot(commands.Bot):\n    \"\"\"Discord Bot集成\"\"\"\n    \n    def __init__(self, rag_client: DanbooruRAGIntegration):\n        intents = discord.Intents.default()\n        intents.message_content = True\n        super().__init__(command_prefix='!', intents=intents)\n        \n        self.rag = rag_client\n        \n        # 添加命令\n        self.add_commands()\n    \n    def add_commands(self):\n        @self.command(name='search')\n        async def search_tags(ctx, *, query: str):\n            \"\"\"搜索Danbooru标签\"\"\"\n            await ctx.send(f\"🔍 搜索标签: `{query}`\")\n            \n            result = self.rag.search_tags(query, limit=5)\n            \n            if \"error\" not in result and result.get(\"results\"):\n                embed = discord.Embed(\n                    title=\"🏷️ 搜索结果\",\n                    description=f\"为查询 `{query}` 找到以下标签:\",\n                    color=0x00ff00\n                )\n                \n                for i, item in enumerate(result[\"results\"][:5], 1):\n                    tag = item.get(\"tag\", \"未知\")\n                    translation = item.get(\"translation\", \"无翻译\")\n                    confidence = item.get(\"confidence\", 0)\n                    \n                    embed.add_field(\n                        name=f\"{i}. {tag}\",\n                        value=f\"翻译: {translation}\\n置信度: {confidence:.2f}\",\n                        inline=False\n                    )\n                \n                await ctx.send(embed=embed)\n            else:\n                await ctx.send(f\"❌ 搜索失败: {result.get('error', '未知错误')}\")\n        \n        @self.command(name='generate')\n        async def generate_prompt(ctx, *, description: str):\n            \"\"\"从场景描述生成提示词\"\"\"\n            await ctx.send(f\"🎨 生成提示词: `{description}`\")\n            \n            result = self.rag.create_scene_prompt(description)\n            \n            if \"error\" not in result:\n                embed = discord.Embed(\n                    title=\"✨ 生成的提示词\",\n                    color=0x0099ff\n                )\n                \n                positive = result.get(\"positive_prompt\", \"\")\n                negative = result.get(\"negative_prompt\", \"\")\n                \n                if len(positive) > 1024:\n                    positive = positive[:1021] + \"...\"\n                if len(negative) > 1024:\n                    negative = negative[:1021] + \"...\"\n                \n                embed.add_field(\n                    name=\"🟢 正面提示词\",\n                    value=f\"```{positive}```\",\n                    inline=False\n                )\n                \n                if negative:\n                    embed.add_field(\n                        name=\"🔴 负面提示词\",\n                        value=f\"```{negative}```\",\n                        inline=False\n                    )\n                \n                await ctx.send(embed=embed)\n            else:\n                await ctx.send(f\"❌ 生成失败: {result.get('error', '未知错误')}\")\n        \n        @self.command(name='analyze')\n        async def analyze_prompts(ctx, *, prompts: str):\n            \"\"\"分析提示词\"\"\"\n            prompt_list = [p.strip() for p in prompts.split(',')]\n            \n            await ctx.send(f\"🔬 分析 {len(prompt_list)} 个提示词...\")\n            \n            result = self.rag.analyze_prompts(prompt_list)\n            \n            if \"error\" not in result:\n                analysis = result.get(\"analysis\", {})\n                \n                embed = discord.Embed(\n                    title=\"📊 提示词分析结果\",\n                    color=0xff9900\n                )\n                \n                # 显示分析结果的关键信息\n                nsfw_level = analysis.get(\"nsfw_level\", \"未知\")\n                complexity = analysis.get(\"complexity_score\", 0)\n                \n                embed.add_field(\n                    name=\"🔞 NSFW等级\",\n                    value=nsfw_level,\n                    inline=True\n                )\n                \n                embed.add_field(\n                    name=\"🧩 复杂度\",\n                    value=f\"{complexity:.1%}\",\n                    inline=True\n                )\n                \n                tags_found = len(analysis.get(\"individual_analysis\", []))\n                embed.add_field(\n                    name=\"🏷️ 识别标签数\",\n                    value=str(tags_found),\n                    inline=True\n                )\n                \n                await ctx.send(embed=embed)\n            else:\n                await ctx.send(f\"❌ 分析失败: {result.get('error', '未知错误')}\")\n\n# ==============================================================================\n# 🌐 Web应用集成 (FastAPI)\n# ==============================================================================\n\nclass DanbooruWebAPI:\n    \"\"\"Web API集成\"\"\"\n    \n    def __init__(self, rag_client: DanbooruRAGIntegration):\n        self.rag = rag_client\n        self.app = FastAPI(title=\"Danbooru RAG API\", version=\"1.0.0\")\n        \n        # 添加CORS中间件\n        self.app.add_middleware(\n            CORSMiddleware,\n            allow_origins=[\"*\"],\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        \n        self.setup_routes()\n    \n    def setup_routes(self):\n        @self.app.get(\"/\")\n        async def root():\n            return {\"message\": \"Danbooru BGE-M3 RAG API\", \"version\": \"1.0.0\"}\n        \n        @self.app.post(\"/api/search\")\n        async def api_search(request: dict):\n            query = request.get(\"query\", \"\")\n            limit = request.get(\"limit\", 20)\n            \n            if not query:\n                raise HTTPException(status_code=400, detail=\"Query is required\")\n            \n            result = self.rag.search_tags(query, limit)\n            return result\n        \n        @self.app.post(\"/api/generate\")\n        async def api_generate(request: dict):\n            description = request.get(\"description\", \"\")\n            nsfw_level = request.get(\"nsfw_level\", \"none\")\n            \n            if not description:\n                raise HTTPException(status_code=400, detail=\"Description is required\")\n            \n            result = self.rag.create_scene_prompt(description, nsfw_level)\n            return result\n        \n        @self.app.post(\"/api/analyze\")\n        async def api_analyze(request: dict):\n            prompts = request.get(\"prompts\", [])\n            \n            if not prompts:\n                raise HTTPException(status_code=400, detail=\"Prompts are required\")\n            \n            result = self.rag.analyze_prompts(prompts)\n            return result\n\n# ==============================================================================\n# 🎨 Gradio界面集成\n# ==============================================================================\n\ndef create_gradio_interface(rag_client: DanbooruRAGIntegration):\n    \"\"\"创建Gradio Web界面\"\"\"\n    \n    def search_interface(query, limit):\n        \"\"\"搜索界面\"\"\"\n        if not query:\n            return \"请输入搜索查询\", \"\"\n        \n        result = rag_client.search_tags(query, int(limit))\n        \n        if \"error\" in result:\n            return f\"错误: {result['error']}\", \"\"\n        \n        # 格式化结果\n        output = f\"🔍 搜索查询: {query}\\n\\n\"\n        output += f\"📊 找到 {len(result.get('results', []))} 个结果:\\n\\n\"\n        \n        for i, item in enumerate(result.get(\"results\", []), 1):\n            tag = item.get(\"tag\", \"未知\")\n            translation = item.get(\"translation\", \"无翻译\")\n            confidence = item.get(\"confidence\", 0)\n            \n            output += f\"{i}. **{tag}**\\n\"\n            output += f\"   翻译: {translation}\\n\"\n            output += f\"   置信度: {confidence:.2f}\\n\\n\"\n        \n        # 生成可复制的标签列表\n        tag_list = \", \".join([item.get(\"tag\", \"\") for item in result.get(\"results\", [])[:10]])\n        \n        return output, tag_list\n    \n    def generate_interface(description, nsfw_level):\n        \"\"\"生成界面\"\"\"\n        if not description:\n            return \"请输入场景描述\", \"\", \"\"\n        \n        result = rag_client.create_scene_prompt(description, nsfw_level)\n        \n        if \"error\" in result:\n            return f\"错误: {result['error']}\", \"\", \"\"\n        \n        analysis = f\"🎬 场景分析: {description}\\n\\n\"\n        analysis += f\"🔞 NSFW等级: {nsfw_level}\\n\\n\"\n        \n        scene_analysis = result.get(\"scene_analysis\", {})\n        if scene_analysis:\n            analysis += \"📋 场景要素:\\n\"\n            for key, value in scene_analysis.items():\n                analysis += f\"  • {key}: {value}\\n\"\n        \n        positive = result.get(\"positive_prompt\", \"\")\n        negative = result.get(\"negative_prompt\", \"\")\n        \n        return analysis, positive, negative\n    \n    # 创建Gradio界面\n    with gr.Blocks(title=\"Danbooru BGE-M3 RAG System\") as demo:\n        gr.Markdown(\"# 🎨 Danbooru BGE-M3 RAG System\")\n        \n        with gr.Tab(\"🔍 标签搜索\"):\n            with gr.Row():\n                search_input = gr.Textbox(\n                    label=\"搜索查询\", \n                    placeholder=\"输入您想搜索的内容，如：1girl blonde_hair\"\n                )\n                search_limit = gr.Slider(\n                    minimum=1, maximum=50, value=10, step=1,\n                    label=\"结果数量\"\n                )\n            \n            search_btn = gr.Button(\"🔍 搜索\", variant=\"primary\")\n            \n            with gr.Row():\n                search_output = gr.Textbox(\n                    label=\"搜索结果\", \n                    lines=10, \n                    interactive=False\n                )\n                tag_list_output = gr.Textbox(\n                    label=\"标签列表 (可复制)\", \n                    lines=3, \n                    interactive=True\n                )\n            \n            search_btn.click(\n                search_interface,\n                inputs=[search_input, search_limit],\n                outputs=[search_output, tag_list_output]\n            )\n        \n        with gr.Tab(\"🎨 场景生成\"):\n            with gr.Row():\n                scene_input = gr.Textbox(\n                    label=\"场景描述\", \n                    placeholder=\"描述您想要的场景，如：一个女孩在海边看日落\",\n                    lines=3\n                )\n                nsfw_select = gr.Dropdown(\n                    choices=[\"none\", \"low\", \"medium\", \"high\"],\n                    value=\"none\",\n                    label=\"NSFW等级\"\n                )\n            \n            generate_btn = gr.Button(\"🎨 生成提示词\", variant=\"primary\")\n            \n            with gr.Row():\n                analysis_output = gr.Textbox(\n                    label=\"场景分析\", \n                    lines=8, \n                    interactive=False\n                )\n            \n            with gr.Row():\n                positive_output = gr.Textbox(\n                    label=\"正面提示词\", \n                    lines=5, \n                    interactive=True\n                )\n                negative_output = gr.Textbox(\n                    label=\"负面提示词\", \n                    lines=5, \n                    interactive=True\n                )\n            \n            generate_btn.click(\n                generate_interface,\n                inputs=[scene_input, nsfw_select],\n                outputs=[analysis_output, positive_output, negative_output]\n            )\n    \n    return demo\n\n# ==============================================================================\n# 🚀 主函数和使用示例\n# ==============================================================================\n\nasync def main():\n    \"\"\"主函数 - 演示所有集成\"\"\"\n    print(\"🔗 Danbooru BGE-M3 RAG Server - 集成示例\")\n    print(\"=\" * 50)\n    \n    # 初始化RAG客户端\n    rag_client = DanbooruRAGIntegration()\n    \n    print(\"\\n1. 🎨 Stable Diffusion WebUI 集成示例\")\n    sd_plugin = StableDiffusionWebUIPlugin(rag_client)\n    enhanced = sd_plugin.enhance_prompt(\"cute girl with blue hair\")\n    print(f\"   原始: {enhanced['original']}\")\n    print(f\"   增强: {enhanced['positive'][:100]}...\")\n    \n    print(\"\\n2. 🖼️ ComfyUI 集成示例\")\n    comfy = ComfyUIIntegration(rag_client)\n    workflow = comfy.create_workflow_with_rag(\"magical girl in forest\")\n    print(f\"   工作流创建: {'成功' if workflow['success'] else '失败'}\")\n    \n    print(\"\\n3. 🌐 Web API 集成\")\n    web_api = DanbooruWebAPI(rag_client)\n    print(\"   FastAPI服务器已配置\")\n    \n    print(\"\\n4. 🎨 Gradio界面\")\n    gradio_demo = create_gradio_interface(rag_client)\n    print(\"   Gradio界面已创建\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🎉 所有集成示例配置完成!\")\n    print(\"📖 请查看各个类的详细实现\")\n    print(\"🔗 更多信息: https://github.com/2799662352/rag-mcp\")\n    print(\"=\" * 50)\n\nif __name__ == \"__main__\":\n    # 运行示例\n    asyncio.run(main())