name: 🚀 CI/CD Pipeline

on:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [ published ]\n\nenv:\n  PYTHON_VERSION: '3.11'\n  PYTORCH_VERSION: '2.0.0'\n  CUDA_VERSION: '11.8'\n\njobs:\n  # 🧪 代码质量检查\n  code-quality:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install black flake8 mypy pytest\n        pip install -r requirements.txt\n    \n    - name: Code formatting check\n      run: black --check .\n    \n    - name: Linting\n      run: flake8 --max-line-length=100 --ignore=E203,W503\n    \n    - name: Type checking\n      run: mypy . --ignore-missing-imports\n\n  # 🔒 安全扫描\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Run security scan\n      uses: pypa/gh-action-pip-audit@v1.0.8\n      with:\n        inputs: requirements.txt\n    \n    - name: Dependency vulnerability scan\n      run: |\n        pip install safety\n        safety check --json\n\n  # 🧪 单元测试\n  unit-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.9', '3.10', '3.11']\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pytest pytest-cov\n        pip install -r requirements.txt\n    \n    - name: Run tests\n      run: |\n        pytest tests/ --cov=src --cov-report=xml\n    \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n\n  # 🏗️ Docker构建测试\n  docker-build:\n    runs-on: ubuntu-latest\n    needs: [code-quality, unit-tests]\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Build Docker image\n      run: |\n        docker build -t rag-mcp:test .\n    \n    - name: Test Docker container\n      run: |\n        docker run --rm rag-mcp:test python -c \"import torch; print('Docker build success!')\"\n\n  # 🎯 性能基准测试\n  performance-test:\n    runs-on: ubuntu-latest\n    needs: [unit-tests]\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n    \n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n        pip install pytest-benchmark\n    \n    - name: Run performance tests\n      run: |\n        pytest tests/test_performance.py --benchmark-only\n\n  # 🚀 部署准备（仅在main分支）\n  deploy-prep:\n    runs-on: ubuntu-latest\n    needs: [code-quality, security-scan, unit-tests, docker-build]\n    if: github.ref == 'refs/heads/main'\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Create deployment artifact\n      run: |\n        tar -czf rag-mcp-${{ github.sha }}.tar.gz \\\n          *.py *.md requirements.txt Dockerfile docker-compose.yml\n    \n    - name: Upload artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: rag-mcp-deployment\n        path: rag-mcp-${{ github.sha }}.tar.gz\n\n  # 📦 Docker发布（仅在release时）\n  docker-publish:\n    runs-on: ubuntu-latest\n    needs: [deploy-prep]\n    if: github.event_name == 'release'\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Login to Docker Hub\n      uses: docker/login-action@v3\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n    \n    - name: Extract version\n      id: extract_version\n      run: echo \"version=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n    \n    - name: Build and push\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        push: true\n        tags: |\n          ${{ secrets.DOCKER_USERNAME }}/rag-mcp:latest\n          ${{ secrets.DOCKER_USERNAME }}/rag-mcp:${{ steps.extract_version.outputs.version }}\n        platforms: linux/amd64,linux/arm64\n\n  # 📊 构建通知\n  notify:\n    runs-on: ubuntu-latest\n    needs: [code-quality, security-scan, unit-tests, docker-build]\n    if: always()\n    steps:\n    - name: Notify build status\n      run: |\n        if [[ \"${{ needs.code-quality.result }}\" == \"success\" && \\\n              \"${{ needs.security-scan.result }}\" == \"success\" && \\\n              \"${{ needs.unit-tests.result }}\" == \"success\" && \\\n              \"${{ needs.docker-build.result }}\" == \"success\" ]]; then\n          echo \"✅ All checks passed! Build successful.\"\n        else\n          echo \"❌ Some checks failed. Please review.\"\n          exit 1\n        fi